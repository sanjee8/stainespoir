{% extends '@EasyAdmin/page/content.html.twig' %}

{% block content %}
    {% for label, msgs in app.flashes %}
        {% for m in msgs %}<div class="alert alert-{{ label }}">{{ m }}</div>{% endfor %}
    {% endfor %}

    <style>
        /* ===== Variables Bootstrap/EasyAdmin (clair + sombre) ===== */
        :root{
            --card-bg: var(--bs-body-bg);
            --card-border: var(--bs-border-color, #e5e7eb);
            --muted: var(--bs-secondary-color, #6b7280);
            --chip-bg: var(--bs-tertiary-bg, #f1f5f9);
            --chip-border: var(--bs-border-color, #e5e7eb);
            --seg-bg: var(--bs-tertiary-bg, #f1f5f9);
            --seg-active-bg: var(--bs-body-bg, #fff);

            /* Accents */
            --ok: #16a34a;     /* green-600 */
            --no: #dc2626;     /* red-600 */
            --nu: #64748b;     /* slate-500 */

            /* Contraste contextuel (noir en clair, blanc en sombre) */
            --on-bg: #000;
        }
        .ea-dark{ --on-bg: #fff; }

        /* === Déductions pour lignes enfants (pas de fond blanc) === */
        :root{
            --row-border:   color-mix(in oklab, var(--card-border), var(--on-bg) 10%);
            --row-alt-bg:   color-mix(in oklab, var(--bs-body-bg), var(--on-bg) 3%);  /* zebra subtil */
            --row-hover-bg: color-mix(in oklab, var(--bs-body-bg), var(--on-bg) 6%);  /* hover doux */
            --ring-ok:      color-mix(in oklab, var(--ok),   var(--bs-body-bg) 78%);
            --ring-no:      color-mix(in oklab, var(--no),   var(--bs-body-bg) 78%);
            --ring-nu:      color-mix(in oklab, var(--nu),   var(--bs-body-bg) 78%);
            --sel-ok:       color-mix(in oklab, var(--ok),   var(--bs-body-bg) 82%);
            --sel-no:       color-mix(in oklab, var(--no),   var(--bs-body-bg) 84%);
            --sel-nu:       color-mix(in oklab, var(--nu),   var(--bs-body-bg) 86%);
        }

        .p-head{ margin-bottom: .75rem }
        .p-sub{ font-size:.95rem; color: var(--muted) }

        .p-controls{
            display: block;
            padding: .9rem;
            margin-bottom: 1rem;
        }
        .grid{
            display:grid; gap:.75rem;
            grid-template-columns: 1fr;
        }
        @media (min-width: 992px){ .grid{ grid-template-columns: 1fr; } }

        .chips{ display:flex; gap:.5rem; flex-wrap:wrap }
        .chip{
            display:inline-flex; align-items:center; gap:.4rem;
            padding:.4rem .6rem; border-radius:999px; border:1px solid var(--chip-border);
            background: var(--chip-bg); font-weight:500;
        }
        .dot{ width:10px; height:10px; border-radius:50% }
        .dot.y{ background:var(--ok) } .dot.n{ background:var(--no) } .dot.u{ background:var(--nu) }

        .row-inline{ display:flex; gap:.6rem; flex-wrap:wrap; align-items:center }
        .row-inline .grow{ flex:1 1 260px }

        /* ===== Liste enfants SANS fond blanc ===== */
        .kid-list{ display:grid; gap:.6rem }
        .kid{
            display:flex; align-items:center; justify-content:space-between; gap:.75rem;
            padding:.75rem .85rem; border:1px solid var(--row-border);
            border-radius:.75rem; background: transparent;        /* ⟵ plus de blanc */
            transition: background .15s ease, border-color .15s ease, box-shadow .15s ease;
        }
        .kid:nth-child(odd){ background: var(--row-alt-bg); }      /* zébrage subtil */
        .kid:hover{ background: var(--row-hover-bg); }
        .kid:focus-within{ outline: 2px solid color-mix(in oklab, var(--on-bg), transparent 82%); outline-offset: 2px }

        /* Marqueur latéral selon l’état (ultra lisible) */
        .kid[data-state="present"]{ border-left: 4px solid var(--ok);    padding-left: .65rem; }
        .kid[data-state="absent"] { border-left: 4px solid var(--no);    padding-left: .65rem; }
        .kid[data-state="unset"]  { border-left: 4px solid var(--row-border); padding-left: .65rem; }

        .who{ min-width:0 }
        .who b{ display:block; font-size:1rem }
        .who .muted{ color: var(--muted); font-size:.9rem; white-space:nowrap; overflow:hidden; text-overflow:ellipsis }

        /* ===== Segmented control — sélection TRÈS visible ===== */
        .seg{
            display:inline-flex; border:1px solid var(--row-border); border-radius:.6rem; overflow:hidden;
            background: transparent;
        }
        .seg input{ position:absolute; opacity:0; pointer-events:none }
        .seg label{
            padding:.5rem .9rem; min-width:108px; text-align:center; cursor:pointer; user-select:none;
            background: transparent; border-right:1px solid var(--row-border); font-weight:600;
            display:inline-flex; align-items:center; justify-content:center; gap:.45rem;
            color: color-mix(in oklab, var(--on-bg), transparent 35%);
        }
        .seg label:last-child{ border-right:none }

        /* État sélectionné : fond teinté + anneau + icône */
        .seg input:checked + label[data-v="present"]{
            background: var(--sel-ok); box-shadow: 0 0 0 2px var(--ring-ok) inset;
            color: color-mix(in oklab, var(--ok), var(--on-bg) 30%);
        }
        .seg input:checked + label[data-v="absent"]{
            background: var(--sel-no); box-shadow: 0 0 0 2px var(--ring-no) inset;
            color: color-mix(in oklab, var(--no), var(--on-bg) 30%);
        }
        .seg input:checked + label[data-v="unset"]{
            background: var(--sel-nu); box-shadow: 0 0 0 2px var(--ring-nu) inset;
            color: color-mix(in oklab, var(--nu), var(--on-bg) 30%);
        }
        .seg input:checked + label::before{
            font-weight:800; display:inline-block; line-height:1;
        }
        .seg input:checked + label[data-v="present"]::before{ content:'✓'; }
        .seg input:checked + label[data-v="absent"]::before { content:'✗'; }
        .seg input:checked + label[data-v="unset"]::before  { content:'—'; }

        /* Focus clavier */
        .seg label:focus-visible{
            outline: 2px solid color-mix(in oklab, var(--on-bg), transparent 75%);
            outline-offset: 2px;
        }

        /* Barre d’enregistrement */
        .savebar{
            position: sticky; bottom: 0; z-index: 5; margin: 1rem -1rem -1rem;
            padding: .9rem 1rem; background: linear-gradient(180deg, color-mix(in oklab, var(--card-bg), transparent 40%), var(--card-bg) 35%);
            border-top: 1px solid var(--card-border); display:flex; gap:.6rem; justify-content:flex-end;
        }

        .content-wrapper { display: block; }
    </style>

    <div class="p-head" style="display:block;">
        <h1 class="mb-1">Présences — fiche du {{ date|date('d/m/Y', 'Europe/Paris') }}</h1>
        {% if existingCount > 0 %}
            <div class="p-sub">✔ {{ existingCount }} enregistrement(s) déjà saisi(s) pour cette date — chargés ci-dessous.</div>
        {% else %}
            <div class="p-sub">Aucun émargement encore saisi pour cette date.</div>
        {% endif %}
    </div>

    {# ——— Contrôles AU-DESSUS de la liste ——— #}
    <div class="p-controls">
        <form class="grid" method="get" action="{{ path('admin_presences') }}">
            <div class="row-inline">
                <div>
                    <label class="form-label mb-1"><b>Date</b></label>
                    <input type="date" name="date" value="{{ date|date('Y-m-d', 'Europe/Paris') }}" class="form-control" onchange="this.form.submit()">
                </div>

                <div class="grow">
                    <div class="chips" aria-label="Compteurs">
                        <span class="chip"><span class="dot y"></span> Présents : <b id="kpiY">0</b></span>
                        <span class="chip"><span class="dot n"></span> Absents : <b id="kpiN">0</b></span>
                        <span class="chip"><span class="dot u"></span> — : <b id="kpiU">0</b></span>
                    </div>
                </div>
            </div>

            <div class="row-inline">
                <input type="search" id="q" class="form-control grow" placeholder="Rechercher un enfant (nom, niveau)…" aria-label="Rechercher un enfant">
                <label class="form-check" style="white-space:nowrap">
                    <input type="checkbox" class="form-check-input" id="onlyUnset">
                    <span class="form-check-label">Afficher uniquement —</span>
                </label>
            </div>

            <div class="row-inline">
                <button class="btn btn-outline-success btn-sm" type="button" id="btnAllPresent">Tout présent</button>
                <button class="btn btn-outline-danger btn-sm"  type="button" id="btnAllAbsent">Tout absent</button>
                <button class="btn btn-outline-secondary btn-sm" type="button" id="btnAllUnset">Tout —</button>
            </div>
        </form>
    </div>

    {# ——— Liste + POST ——— #}
    <form method="post" action="{{ path('admin_presences') }}">
        <input type="hidden" name="date" value="{{ app.request.query.get('date') ?: date|date('Y-m-d', 'Europe/Paris') }}">
        <input type="hidden" name="do" value="save">
        <input type="hidden" name="_token" value="{{ csrf_token('presence_save') }}">

        <div class="kid-list" id="kidList">
            {% for c in children %}
                {% set cid    = c.id ?? c.getId() %}
                {% set fname  = c.firstName ?? (c.getFirstName is defined ? c.getFirstName() : '') %}
                {% set lname  = c.lastName  ?? (c.getLastName  is defined ? c.getLastName()  : '') %}
                {% set level  = c.level     ?? (c.getLevel     is defined ? c.getLevel()     : null) %}

                {% set att = attMap[cid]|default(null) %}
                {% set st  = att ? (att.status ?? (att.getStatus is defined ? att.getStatus() : null)) : null %}
                {% set isP = st == 'present' %}
                {% set isA = st == 'absent'  %}
                {% set isU = st is null %}

                <div class="kid" data-name="{{ (fname ~ ' ' ~ lname)|lower }}" data-level="{{ (level|default(''))|lower }}" data-state="{{ isP ? 'present' : (isA ? 'absent' : 'unset') }}">
                    <div class="who">
                        <b>{{ fname }} {{ lname }}</b>
                        <span class="muted">{{ level ?: '—' }}</span>
                    </div>

                    <div class="seg" role="tablist" aria-label="Présence de {{ fname }} {{ lname }}">
                        <input id="p-{{ cid }}" type="radio" name="st[{{ cid }}]" value="present" {{ isP ? 'checked' }}>
                        <label for="p-{{ cid }}" data-v="present" role="tab" aria-selected="{{ isP ? 'true' : 'false' }}">Présent</label>

                        <input id="a-{{ cid }}" type="radio" name="st[{{ cid }}]" value="absent"  {{ isA ? 'checked' }}>
                        <label for="a-{{ cid }}" data-v="absent" role="tab" aria-selected="{{ isA ? 'true' : 'false' }}">Absent</label>

                        <input id="u-{{ cid }}" type="radio" name="st[{{ cid }}]" value="unset"   {{ isU ? 'checked' }}>
                        <label for="u-{{ cid }}" data-v="unset"  role="tab" aria-selected="{{ isU ? 'true' : 'false' }}">—</label>
                    </div>
                </div>
            {% else %}
                <div class="alert alert-secondary mb-0">Aucun enfant validé.</div>
            {% endfor %}
        </div>

        <div class="savebar">
            <button class="btn btn-primary btn-lg" type="submit">Enregistrer</button>
        </div>
    </form>

    <script>
        (function(){
            const list = document.getElementById('kidList');
            if (!list) return;

            const q = document.getElementById('q');
            const onlyUnset = document.getElementById('onlyUnset');
            const kpiY = document.getElementById('kpiY');
            const kpiN = document.getElementById('kpiN');
            const kpiU = document.getElementById('kpiU');

            function updateKPIs(){
                let y=0,n=0,u=0;
                list.querySelectorAll('.kid').forEach(k=>{
                    if (k.style.display === 'none') return;
                    const state = k.dataset.state || 'unset';
                    if (state==='present') y++;
                    else if (state==='absent') n++;
                    else u++;
                });
                kpiY.textContent=y; kpiN.textContent=n; kpiU.textContent=u;
            }

            function applyFilters(){
                const term = (q.value || '').trim().toLowerCase();
                const onlyU = !!onlyUnset.checked;
                list.querySelectorAll('.kid').forEach(k=>{
                    const matchText = (k.dataset.name + ' ' + k.dataset.level).includes(term);
                    const isU = k.dataset.state === 'unset';
                    const show = matchText && (!onlyU || isU);
                    k.style.display = show ? '' : 'none';
                });
                updateKPIs();
            }

            list.addEventListener('change', (e)=>{
                const input = e.target;
                if (input && input.name && input.name.startsWith('st[')) {
                    const kid = input.closest('.kid');
                    if (!kid) return;
                    kid.dataset.state = input.value || 'unset';
                    applyFilters();
                }
            });

            function setAll(val){
                list.querySelectorAll('input[type=radio][value="'+val+'"]').forEach(r => {
                    r.checked = true; r.dispatchEvent(new Event('change', {bubbles:true}));
                });
            }
            document.getElementById('btnAllPresent')?.addEventListener('click', ()=> setAll('present'));
            document.getElementById('btnAllAbsent') ?.addEventListener('click', ()=> setAll('absent'));
            document.getElementById('btnAllUnset')  ?.addEventListener('click', ()=> setAll('unset'));

            q?.addEventListener('input', applyFilters);
            onlyUnset?.addEventListener('change', applyFilters);

            applyFilters(); // init
        })();
    </script>
{% endblock %}
