{% extends 'base.html.twig' %}
{% block title %}Autoriser la sortie — {{ reg.outing.title }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .sig-wrap{ margin-top:12px }
        .sig-head{ display:flex; align-items:center; justify-content:space-between; gap:10px; margin-bottom:6px }
        .sig-label{ font-weight:600 }
        .sig-box{
            border:1px dashed #c7c9d1; border-radius:10px; background:#fafafa;
            padding:10px;
        }
        .sig-canvas{
            width:100%; height:180px; display:block; background:#fff; border-radius:8px;
            touch-action:none; /* indispensable mobile */
            cursor: crosshair;
        }
        .sig-actions{ display:flex; gap:8px; justify-content:flex-end; margin-top:8px }
        .sig-help{ color:#6b7280; font-size:.9em }
    </style>
{% endblock %}

{% block body %}
    <main class="account">
        <section class="section">
            <div class="container" style="max-width:800px">
                <a class="btn ghost" href="{{ path('app_account', { enfant: reg.child.id, tab: 'sorties' }) }}">← Retour aux sorties</a>

                <article class="card" style="margin-top:14px">
                    <div class="card-head"><b>Autorisation parentale</b></div>
                    <p style="margin:.25rem 0 .75rem 0">
                        <b>{{ reg.outing.title }}</b><br>
                        {{ reg.outing.startsAt|date('d/m/Y') }} · 10h–12h — {{ reg.outing.location }}
                    </p>

                    <form method="post" action="{{ path('app_account_outing_sign', { id: reg.id }) }}" class="fstack" id="signForm" novalidate>
                        <input type="hidden" name="_token" value="{{ csrf_token('sign_outing_' ~ reg.id) }}">

                        {# Rangée 1 : Nom & Téléphone #}
                        <div class="grid-2">
                            <label class="fgroup floating">
                                <input type="text" name="name" id="sf_name" placeholder=" " value="{{ app.user.profile.firstName ~ ' ' ~ app.user.profile.lastName }}" required>
                                <span>Nom et prénom du parent</span>
                            </label>

                            <label class="fgroup floating">
                                <input type="tel" name="phone" id="sf_phone" placeholder=" " value="{{ app.user.profile.phone }}" required>
                                <span>Téléphone</span>
                            </label>
                        </div>

                        {# Rangée 2 : Infos santé #}
                        <label class="fgroup floating" style="margin-top:12px">
                            <textarea name="health" id="sf_health" rows="4" placeholder=" "></textarea>
                            <span>Infos santé (optionnel)</span>
                        </label>

                        {# Signature manuscrite #}
                        <div class="sig-wrap">
                            <div class="sig-head">
                                <div class="sig-label">Signature manuscrite du représentant légal</div>
                                <div class="sig-help">Signez à la souris (PC) ou au doigt (mobile)</div>
                            </div>
                            <div class="sig-box">
                                <canvas id="sigCanvas" class="sig-canvas" aria-label="Zone de signature"></canvas>
                                <div class="sig-actions">
                                    <button type="button" class="btn ghost" id="sigClear">Effacer</button>
                                </div>
                            </div>
                            {# Stockage de la signature (data:image/png;base64,...) #}
                            <input type="hidden" name="signature" id="sigData">
                        </div>

                        {# Consentement légal #}
                        <label class="row" style="gap:10px; align-items:flex-start; margin-top:10px">
                            <input type="checkbox" name="consent" required style="margin-top:4px">
                            <span>J’autorise la participation de mon enfant à cette sortie et je certifie être son représentant légal.</span>
                        </label>

                        <div class="actions" style="margin-top:12px; gap:8px">
                            <button class="btn primary" type="submit">Signer et autoriser</button>
                            <a class="btn" href="{{ path('app_account', { enfant: reg.child.id, tab: 'sorties' }) }}">Annuler</a>
                        </div>
                    </form>
                </article>
            </div>
        </section>
    </main>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/signature_pad@4.1.7/dist/signature_pad.umd.min.js"></script>

    <script>
        (function(){
            function initSignature(){
                const form    = document.getElementById('signForm');
                const canvas  = document.getElementById('sigCanvas');
                const hidden  = document.getElementById('sigData');
                const clearBtn= document.getElementById('sigClear');

                // Si on n'est pas sur la page de signature, on sort (évite les erreurs)
                if (!form || !canvas || !hidden || !clearBtn) return;

                // Taille HiDPI sans flou + fallback si hauteur CSS à 0
                function resizeCanvas(keep=false){
                    const ratio = Math.max(window.devicePixelRatio || 1, 1);
                    // si le canvas est "plat", force une hauteur CSS initiale
                    if (canvas.clientHeight < 120) canvas.style.height = '180px';
                    const rect = canvas.getBoundingClientRect();

                    let data = null;
                    if (keep) { try { data = canvas.toDataURL('image/png'); } catch(e){} }

                    canvas.width  = Math.max(300, Math.floor(rect.width  * ratio));
                    canvas.height = Math.max(140, Math.floor(rect.height * ratio));

                    const ctx = canvas.getContext('2d');
                    ctx.setTransform(1,0,0,1,0,0); // reset
                    ctx.scale(ratio, ratio);
                    ctx.fillStyle = '#fff';
                    ctx.fillRect(0,0,canvas.width,canvas.height);

                    if (keep && data){
                        const img = new Image();
                        img.onload = ()=>{ ctx.drawImage(img, 0, 0, rect.width, rect.height); };
                        img.src = data;
                    }
                }

                resizeCanvas(false);
                window.addEventListener('resize', ()=>resizeCanvas(true));

                function ensureHasSignature(){
                    if (!hidden.value) {
                        alert("Merci de signer dans la zone prévue.");
                        return false;
                    }
                    return true;
                }

                if (window.SignaturePad){
                    const pad = new window.SignaturePad(canvas, {
                        penColor:'#111',
                        backgroundColor:'#fff',
                        minWidth:0.8,
                        maxWidth:2.5,
                    });
                    function syncHidden(){ hidden.value = pad.isEmpty() ? '' : pad.toDataURL('image/png'); }
                    pad.addEventListener('endStroke', syncHidden);
                    clearBtn.addEventListener('click', function(){ pad.clear(); syncHidden(); });
                    form.addEventListener('submit', function(e){
                        syncHidden();
                        // décommente pour rendre la signature obligatoire :
                        // if (!hidden.value) { e.preventDefault(); ensureHasSignature(); }
                    });
                } else {
                    // Fallback pur canvas (si CDN bloqué)
                    const ctx = canvas.getContext('2d');
                    ctx.lineWidth = 2; ctx.lineCap = 'round'; ctx.strokeStyle = '#111';
                    let drawing = false;

                    const start = (e)=>{ e.preventDefault(); drawing = true; const p = pt(e); ctx.beginPath(); ctx.moveTo(p.x, p.y); };
                    const move  = (e)=>{ if(!drawing) return; const p = pt(e); ctx.lineTo(p.x, p.y); ctx.stroke(); };
                    const end   = ()=>{ if(!drawing) return; drawing = false; hidden.value = canvas.toDataURL('image/png'); };

                    function pt(e){
                        const t = e.touches ? e.touches[0] : e;
                        const r = canvas.getBoundingClientRect();
                        return { x: t.clientX - r.left, y: t.clientY - r.top };
                    }

                    canvas.addEventListener('pointerdown', start, {passive:false});
                    canvas.addEventListener('pointermove',  move,  {passive:false});
                    window.addEventListener('pointerup',    end,   {passive:false});
                    canvas.addEventListener('touchstart',   start, {passive:false});
                    canvas.addEventListener('touchmove',    move,  {passive:false});
                    window.addEventListener('touchend',     end,   {passive:false});

                    clearBtn.addEventListener('click', function(){
                        ctx.clearRect(0,0,canvas.width,canvas.height); hidden.value='';
                        // reblanchit le fond
                        ctx.fillStyle = '#fff'; ctx.fillRect(0,0,canvas.width,canvas.height);
                    });

                    form.addEventListener('submit', function(e){
                        // if (!hidden.value) { e.preventDefault(); ensureHasSignature(); }
                    });
                }
            }

            // Initialisation fiable (classique + Turbo)
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initSignature, { once:true });
            } else {
                initSignature();
            }
            document.addEventListener('turbo:load', initSignature);
        })();
    </script>
{% endblock %}

